<?php

namespace App\Models;


use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use \Spatie\Permission\Models\Permission as BasePermission;

class Permission extends BasePermission
{
    const PERMISSIONS_NOT_APPLIED = true;

    protected static mixed $abilities;
    protected static mixed $models;
    protected static mixed $permissions;


    public static function defaultPermissions(): array
    {
        self::$permissions = [];
        self::$abilities = collect([ 'create', 'read', 'read-all', 'update', 'delete' ]);
        $modelFiles = Storage::disk('app')->files('Models');

        $modelFiles = array_unique(array_filter($modelFiles, function ($model) {
            return !str_ends_with($model, '~');
        }));




        self::$models = collect($modelFiles)->map(function ($modelFile) {
            $model = str_replace('.php', '', $modelFile);
            $model = str_replace('Models/', '', $model);
            $modelClass = 'App\\Models\\' . str_replace('/', '\\', $model);

            self::$abilities->map(function ($ability) use ($model, $modelClass) {
                dd($model);
                if (!defined("$modelClass::PERMISSIONS_NOT_APPLIED") || !$modelClass::PERMISSIONS_NOT_APPLIED) {
                    $perm = $ability . Str::lower(implode('-', preg_split('/(?=[A-Z])/', $model)));
                    self::$permissions[] = [ 'name' => $perm, 'action' => $ability, 'model' => $model, 'guard_name' => 'admin' ];
                }
            });
            if (defined("$modelClass::ADDITIONAL_PERMISSIONS")) {

                foreach ($modelClass::ADDITIONAL_PERMISSIONS as $additionalPermission) {

                    self::$permissions[] = [
                        'name'       => $additionalPermission  . Str::lower(implode('-', preg_split('/(?=[A-Z])/', $model))) ,
                        'action'     => $additionalPermission,
                        'model'      => $model,
                        'guard_name' => 'admin'
                    ];

                }

            }
        });

        return self::$permissions;
    }
}
